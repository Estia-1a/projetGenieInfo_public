export default {
  milestones: {
    Tutorial: [
      {
        feature: "dimension",
        name: "Dimension 64x64",
        Difficulty: "1",
        description: "Test if the dimension feature is working",
        options: ["-c", "dimension"],
        type: "stdout",
        input: ["input/rgbw_64x64.bmp"],
        output: "^\\s*[dD]imension\\s*:\\s*64,\\s*64\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "dimension",
        name: "Dimension 1x1",
        Difficulty: "3",
        description:
          "Test if the dimension feature is working for one by one files",
        options: ["-c", "dimension"],
        type: "stdout",
        input: ["input/r_1x1.bmp"],
        output: "^\\s*[dD]imension\\s*:\\s*1,\\s*1\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "dimension",
        name: "Dimension 32x64",
        Difficulty: "2",
        description: "Test if the dimension feature is working",
        options: ["-c", "dimension"],
        type: "stdout",
        input: ["input/rgbw_32x64.bmp"],
        output: "^\\s*[dD]imension\\s*:\\s*32,\\s*64\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "dimension",
        name: "Dimension 64x32",
        Difficulty: "2",
        description: "Test if the dimension feature is working",
        options: ["-c", "dimension"],
        type: "stdout",
        input: ["input/rgbw_64x32.bmp"],
        output: "^\\s*[dD]imension\\s*:\\s*64,\\s*32\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "first_pixel",
        name: "First Pixel 64x64 : 255, 0, 0",
        Difficulty: "1",
        description: "Check first pixel on 64x64 : should be red",
        options: ["-c", "first_pixel"],
        type: "stdout",
        input: ["input/rgbw_64x64.bmp"],
        output: "^\\s*[fF]irst_[pP]ixel\\s*:\\s*255,\\s*0,\\s*0\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "first_pixel",
        name: "First Pixel Red : 255, 0, 0",
        Difficulty: "1",
        description: "Check first pixel on 32x32 red image",
        options: ["-c", "first_pixel"],
        type: "stdout",
        input: ["input/r_32x32.bmp"],
        output: "^\\s*[fF]irst_[pP]ixel\\s*:\\s*255,\\s*0,\\s*0\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "first_pixel",
        name: "First Pixel Green : 0, 255, 0",
        Difficulty: "1",
        description: "Check first pixel on 32x32 green image",
        options: ["-c", "first_pixel"],
        type: "stdout",
        input: ["input/g_32x32.bmp"],
        output: "^\\s*[fF]irst_[pP]ixel\\s*:\\s*0,\\s*255,\\s*0\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "first_pixel",
        name: "First Pixel Blue : 0, 0, 255",
        Difficulty: "1",
        description: "Check first pixel on 32x32 blue image",
        options: ["-c", "first_pixel"],
        type: "stdout",
        input: ["input/b_32x32.bmp"],
        output: "^\\s*[fF]irst_[pP]ixel\\s*:\\s*0,\\s*0,\\s*255\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "first_pixel",
        name: "First Pixel 1 2 3 : 1, 2, 3",
        Difficulty: "3",
        description: "Check first pixel on 8x8 image",
        options: ["-c", "first_pixel"],
        type: "stdout",
        input: ["input/first_pixel_1_2_3_8x8.bmp"],
        output: "^\\s*[fF]irst_[pP]ixel\\s*:\\s*1,\\s*2,\\s*3\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "tenth_pixel",
        name: "Tenth Pixel 64x64 : 255, 0, 0",
        Difficulty: "1",
        description: "Check tenth pixel on 64x64 red image",
        options: ["-c", "tenth_pixel"],
        type: "stdout",
        input: ["input/rgbw_64x64.bmp"],
        output: "^\\s*[tT]enth_[pP]ixel\\s*:\\s*255,\\s*0,\\s*0\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "tenth_pixel",
        name: "Tenth Pixel Red : 255, 0, 0",
        Difficulty: "1",
        description: "Check tenth pixel on 32x32 red image",
        options: ["-c", "tenth_pixel"],
        type: "stdout",
        input: ["input/r_32x32.bmp"],
        output: "^\\s*[tT]enth_[pP]ixel\\s*:\\s*255,\\s*0,\\s*0\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "tenth_pixel",
        name: "Tenth Pixel Green : 0, 255, 0",
        Difficulty: "1",
        description: "Check tenth pixel on 32x32 green image",
        options: ["-c", "tenth_pixel"],
        type: "stdout",
        input: ["input/g_32x32.bmp"],
        output: "^\\s*[tT]enth_[pP]ixel\\s*:\\s*0,\\s*255,\\s*0\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "tenth_pixel",
        name: "Tenth Pixel Blue : 0, 0, 255",
        Difficulty: "1",
        description: "Check tenth pixel on 32x32 blue image",
        options: ["-c", "tenth_pixel"],
        type: "stdout",
        input: ["input/b_32x32.bmp"],
        output: "^\\s*[tT]enth_[pP]ixel\\s*:\\s*0,\\s*0,\\s*255\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "tenth_pixel",
        name: "Tenth Pixel 11 12 13 : 1, 2, 3",
        Difficulty: "3",
        description: "Check tenth pixel on 10x8 image",
        options: ["-c", "tenth_pixel"],
        type: "stdout",
        input: ["input/tenth_pixel_11_12_13_10x8.bmp"],
        output: "^\\s*[tT]enth_[pP]ixel\\s*:\\s*11,\\s*12,\\s*13\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "second_line",
        name: "Second line First Pixel 64x64 : 255, 0, 0",
        Difficulty: "1",
        description:
          "Check first pixel on the second line on 64x64 : should be red",
        options: ["-c", "second_line"],
        type: "stdout",
        input: ["input/rgbw_64x64.bmp"],
        output: "^\\s*[sS]econd_[lL]ine\\s*:\\s*255,\\s*0,\\s*0\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "second_line",
        name: "Second line First Pixel Red : 255, 0, 0",
        Difficulty: "1",
        description: "Check first pixel on the second line on 32x32 red image",
        options: ["-c", "second_line"],
        type: "stdout",
        input: ["input/r_32x32.bmp"],
        output: "^\\s*[sS]econd_[lL]ine\\s*:\\s*255,\\s*0,\\s*0\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "second_line",
        name: "Second line First Pixel Green : 0, 255, 0",
        Difficulty: "1",
        description:
          "Check first pixel on the second line on 32x32 green image",
        options: ["-c", "second_line"],
        type: "stdout",
        input: ["input/g_32x32.bmp"],
        output: "^\\s*[sS]econd_[lL]ine\\s*:\\s*0,\\s*255,\\s*0\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "second_line",
        name: "Second line First Pixel Blue : 0, 0, 255",
        Difficulty: "1",
        description: "Check first pixel on the second line on 32x32 blue image",
        options: ["-c", "second_line"],
        type: "stdout",
        input: ["input/b_32x32.bmp"],
        output: "^\\s*[sS]econd_[lL]ine\\s*:\\s*0,\\s*0,\\s*255\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "second_line",
        name: "Second line First Pixel 21 22 23",
        Difficulty: "3",
        description: "Check first pixel on the second line on 8x8 image",
        options: ["-c", "second_line"],
        type: "stdout",
        input: ["input/second_line_21_22_23_8x8.bmp"],
        output: "^\\s*[sS]econd_[lL]ine\\s*:\\s*21,\\s*22,\\s*23\\s*$",
        coordinates: "",
        milestone: "Tutorial",
      },
      {
        feature: "print_pixel",
        name: "Print Pixel (0,0) : 0,0,0",
        Difficulty: "3",
        description: "Get the first pixel on 8x8 image",
        options: ["-c", "print_pixel", "0", "0"],
        type: "stdout",
        input: ["input/get_pixel_x0_y0_n_8x8.bmp"],
        output:
          "^\\s*[pP]rint_[pP]ixel\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*0,\\s*0,\\s*0\\s*$",
        coordinates: ["0", "0"],
        milestone: "Tutorial",
      },
      {
        feature: "print_pixel",
        name: "Print Pixel (2,3) : 20,30,26",
        Difficulty: "3",
        description: "Get the pixel of coordinate 2,3 on 8x8 image",
        options: ["-c", "print_pixel", "2", "3"],
        type: "stdout",
        input: ["input/get_pixel_x0_y0_n_8x8.bmp"],
        output:
          "^\\s*[pP]rint_[pP]ixel\\s*\\(\\s*2,\\s*3\\s*\\)\\s*:\\s*20,\\s*30,\\s*26\\s*$",
        coordinates: ["2", "3"],
        milestone: "Tutorial",
      },
      {
        feature: "print_pixel",
        name: "Print Pixel (3,2) : 30,20,19",
        Difficulty: "3",
        description: "Get the pixel of coordinate 2,3 on 8x8 image",
        options: ["-c", "print_pixel", "3", "2"],
        type: "stdout",
        input: ["input/get_pixel_x0_y0_n_8x8.bmp"],
        output:
          "^\\s*[pP]rint_[pP]ixel\\s*\\(\\s*3,\\s*2\\s*\\)\\s*:\\s*30,\\s*20,\\s*19\\s*$",
        coordinates: ["3", "2"],
        milestone: "Tutorial",
      },
      {
        feature: "print_pixel",
        name: "Print Pixel (7,7) : 0,0,0",
        Difficulty: "3",
        description: "Get the pixel of coordinate 7,7 on 8x8 image",
        options: ["-c", "print_pixel", "7", "7"],
        type: "stdout",
        input: ["input/get_pixel_x0_y0_n_8x8.bmp"],
        output:
          "^\\s*[pP]rint_[pP]ixel\\s*\\(\\s*7,\\s*7\\s*\\)\\s*:\\s*70,\\s*70,\\s*63\\s*$",
        coordinates: ["7", "7"],
        milestone: "Tutorial",
      },
    ],
    statistiques: [
      {
        feature: "max_pixel",
        name: "Max Pixel black 8x8",
        Difficulty: "1",
        description: "Get the max pixel of a black image",
        options: ["-c", "max_pixel"],
        type: "stdout",
        input: ["input/Black_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[pP]ixel\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*0,\\s*0,\\s*0\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_pixel",
        name: "Max Pixel white 8x8",
        Difficulty: "1",
        description: "Get the max pixel of a white image",
        options: ["-c", "max_pixel"],
        type: "stdout",
        input: ["input/White_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[pP]ixel\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*255,\\s*255,\\s*255\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_pixel",
        name: "Max Pixel at 6 5",
        Difficulty: "2",
        description: "Get the max pixel at 6 5",
        options: ["-c", "max_pixel"],
        type: "stdout",
        input: ["input/maxPixel_6_5_60_50_100_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[pP]ixel\\s*\\(\\s*6,\\s*5\\s*\\)\\s*:\\s*60,\\s*50,\\s*100\\s*$",
        coordinates: ["6", "5"],
        milestone: "statistiques",
      },
      {
        feature: "max_pixel",
        name: "Max Pixel at 3 4",
        Difficulty: "3",
        description: "Get the max pixel at 3 4",
        options: ["-c", "max_pixel"],
        type: "stdout",
        input: ["input/maxPixel_3_4_30_40_130_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[pP]ixel\\s*\\(\\s*3,\\s*4\\s*\\)\\s*:\\s*30,\\s*40,\\s*130\\s*$",
        coordinates: ["3", "4"],
        milestone: "statistiques",
      },
      {
        feature: "min_pixel",
        name: "Max Pixel black 8x8",
        Difficulty: "1",
        description: "Get the min pixel of a black image",
        options: ["-c", "min_pixel"],
        type: "stdout",
        input: ["input/Black_8x8.bmp"],
        output:
          "^\\s*[mM]in_[pP]ixel\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*0,\\s*0,\\s*0\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_pixel",
        name: "Max Pixel white 8x8",
        Difficulty: "1",
        description: "Get the min pixel of a white image",
        options: ["-c", "min_pixel"],
        type: "stdout",
        input: ["input/White_8x8.bmp"],
        output:
          "^\\s*[mM]in_[pP]ixel\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*255,\\s*255,\\s*255\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_pixel",
        name: "Max Pixel at 6 5",
        Difficulty: "2",
        description: "Get the min pixel at 6 5",
        options: ["-c", "min_pixel"],
        type: "stdout",
        input: ["input/minPixel_6_5_60_50_100_8x8.bmp"],
        output:
          "^\\s*[mM]in_[pP]ixel\\s*\\(\\s*6,\\s*5\\s*\\)\\s*:\\s*60,\\s*50,\\s*100\\s*$",
        coordinates: ["6", "5"],
        milestone: "statistiques",
      },
      {
        feature: "min_pixel",
        name: "Max Pixel at 3 4",
        Difficulty: "3",
        description: "Get the min pixel at 3 4",
        options: ["-c", "min_pixel"],
        type: "stdout",
        input: ["input/minPixel_3_4_30_40_140_8x8.bmp"],
        output:
          "^\\s*[mM]in_[pP]ixel\\s*\\(\\s*3,\\s*4\\s*\\)\\s*:\\s*30,\\s*40,\\s*140\\s*$",
        coordinates: ["3", "4"],
        milestone: "statistiques",
      },
      {
        feature: "min_component R",
        name: "Min Component R of black 8x8",
        Difficulty: "1",
        description: "Get the min component of a black image",
        options: ["-c", "min_component", "R"],
        type: "stdout",
        input: ["input/Black_8x8.bmp"],
        output:
          "^\\s*[mM]in_[cC]omponent\\s*R\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*0\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_component R",
        name: "Min Component R of white 8x8",
        Difficulty: "1",
        description: "Get the min component of a white image",
        options: ["-c", "min_component", "R"],
        type: "stdout",
        input: ["input/White_8x8.bmp"],
        output:
          "^\\s*[mM]in_[cC]omponent\\s*R\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*255\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_component R",
        name: "Min Component 2 0 255 ",
        Difficulty: "3",
        description: "Get the min component at 2 0",
        options: ["-c", "min_component", "R"],
        type: "stdout",
        input: ["input/minComponentR_2_0_5.bmp"],
        output:
          "^\\s*[mM]in_[cC]omponent\\s*R\\s*\\(\\s*2,\\s*0\\s*\\)\\s*:\\s*5\\s*$",
        coordinates: ["2", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_component G",
        name: "Min Component G of black 8x8",
        Difficulty: "1",
        description: "Get the min component of a black image",
        options: ["-c", "min_component", "G"],
        type: "stdout",
        input: ["input/Black_8x8.bmp"],
        output:
          "^\\s*[mM]in_[cC]omponent\\s*G\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*0\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_component G",
        name: "Min Component G of white 8x8",
        Difficulty: "1",
        description: "Get the min component of a white image",
        options: ["-c", "min_component", "G"],
        type: "stdout",
        input: ["input/White_8x8.bmp"],
        output:
          "^\\s*[mM]in_[cC]omponent\\s*G\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*255\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_component G",
        name: "Min Component 2 0 255 ",
        Difficulty: "3",
        description: "Get the min component at 2 0",
        options: ["-c", "min_component", "G"],
        type: "stdout",
        input: ["input/minComponentG_2_0_5.bmp"],
        output:
          "^\\s*[mM]in_[cC]omponent\\s*G\\s*\\(\\s*2,\\s*0\\s*\\)\\s*:\\s*5\\s*$",
        coordinates: ["2", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_component B",
        name: "Min Component B of black 8x8",
        Difficulty: "1",
        description: "Get the min component of a black image",
        options: ["-c", "min_component", "B"],
        type: "stdout",
        input: ["input/Black_8x8.bmp"],
        output:
          "^\\s*[mM]in_[cC]omponent\\s*B\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*0\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_component B",
        name: "Min Component B of white 8x8",
        Difficulty: "1",
        description: "Get the min component of a white image",
        options: ["-c", "min_component", "B"],
        type: "stdout",
        input: ["input/White_8x8.bmp"],
        output:
          "^\\s*[mM]in_[cC]omponent\\s*B\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*255\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "min_component B",
        name: "Min Component 2 0 255 ",
        Difficulty: "3",
        description: "Get the min component at 2 0",
        options: ["-c", "min_component", "B"],
        type: "stdout",
        input: ["input/minComponentB_2_0_5.bmp"],
        output:
          "^\\s*[mM]in_[cC]omponent\\s*B\\s*\\(\\s*2,\\s*0\\s*\\)\\s*:\\s*5\\s*$",
        coordinates: ["2", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_component R",
        name: "Max Component R of black 8x8",
        Difficulty: "1",
        description: "Get the max component of a black image",
        options: ["-c", "max_component", "R"],
        type: "stdout",
        input: ["input/Black_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[cC]omponent\\s*R\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*0\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_component R",
        name: "Max Component R of white 8x8",
        Difficulty: "1",
        description: "Get the max component of a white image",
        options: ["-c", "max_component", "R"],
        type: "stdout",
        input: ["input/White_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[cC]omponent\\s*R\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*255\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_component R",
        name: "Max Component 2 0 255 ",
        Difficulty: "3",
        description: "Get the max component at 2 0",
        options: ["-c", "max_component", "R"],
        type: "stdout",
        input: ["input/maxComponentR_2_0_255.bmp"],
        output:
          "^\\s*[mM]ax_[cC]omponent\\s*R\\s*\\(\\s*2,\\s*0\\s*\\)\\s*:\\s*5\\s*$",
        coordinates: ["2", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_component G",
        name: "Max Component G of black 8x8",
        Difficulty: "1",
        description: "Get the max component of a black image",
        options: ["-c", "max_component", "G"],
        type: "stdout",
        input: ["input/Black_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[cC]omponent\\s*G\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*0\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_component G",
        name: "Max Component G of white 8x8",
        Difficulty: "1",
        description: "Get the max component of a white image",
        options: ["-c", "max_component", "G"],
        type: "stdout",
        input: ["input/White_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[cC]omponent\\s*G\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*255\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_component G",
        name: "Max Component 2 0 255 ",
        Difficulty: "3",
        description: "Get the max component at 2 0",
        options: ["-c", "max_component", "G"],
        type: "stdout",
        input: ["input/maxComponentG_2_0_255.bmp"],
        output:
          "^\\s*[mM]ax_[cC]omponent\\s*G\\s*\\(\\s*2,\\s*0\\s*\\)\\s*:\\s*5\\s*$",
        coordinates: ["2", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_component B",
        name: "Max Component B of black 8x8",
        Difficulty: "1",
        description: "Get the max component of a black image",
        options: ["-c", "max_component", "B"],
        type: "stdout",
        input: ["input/Black_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[cC]omponent\\s*B\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*0\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_component B",
        name: "Max Component B of white 8x8",
        Difficulty: "1",
        description: "Get the max component of a white image",
        options: ["-c", "max_component", "B"],
        type: "stdout",
        input: ["input/White_8x8.bmp"],
        output:
          "^\\s*[mM]ax_[cC]omponent\\s*B\\s*\\(\\s*0,\\s*0\\s*\\)\\s*:\\s*255\\s*$",
        coordinates: ["0", "0"],
        milestone: "statistiques",
      },
      {
        feature: "max_component B",
        name: "Max Component 2 0 255 ",
        Difficulty: "3",
        description: "Get the max component at 2 0",
        options: ["-c", "max_component", "B"],
        type: "stdout",
        input: ["input/maxComponentB_2_0_255.bmp"],
        output:
          "^\\s*[mM]ax_[cC]omponent\\s*B\\s*\\(\\s*2,\\s*0\\s*\\)\\s*:\\s*5\\s*$",
        coordinates: ["2", "0"],
        milestone: "statistiques",
      },
    ],
    colors: [
      {
        feature: "color_red",
        name: "Convert red image to RED",
        Difficulty: "1",
        description: "Test if working on an  red Image ",
        options: ["-c", "color_red"],
        type: "image",
        input: ["input/red_8x8.bmp"],
        output: ["input/red_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_red",
        name: "Convert blue image to RED",
        Difficulty: "1",
        description: "Test if working on an  blue Image ",
        options: ["-c", "color_red"],
        type: "image",
        input: ["input/blue_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_red",
        name: "Convert green Image to RED",
        Difficulty: "1",
        description: "Test if working on an  green Image ",
        options: ["-c", "color_red"],
        type: "image",
        input: ["input/green_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_red",
        name: "Convert white Image to RED",
        Difficulty: "1",
        description: "Test if working on an  white Image ",
        options: ["-c", "color_red"],
        type: "image",
        input: ["input/White_8x8.bmp"],
        output: ["input/red_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_red",
        name: "convert black Image to RED",
        Difficulty: "1",
        description: "Test if working on an  black Image ",
        options: ["-c", "color_red"],
        type: "image",
        input: ["input/Black_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_blue",
        name: "Convert red image to BLUE",
        Difficulty: "1",
        description: "Test if working on an  red Image ",
        options: ["-c", "color_blue"],
        type: "image",
        input: ["input/red_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_blue",
        name: "Convert blue image to BLUE",
        Difficulty: "1",
        description: "Test if working on an  blue Image ",
        options: ["-c", "color_blue"],
        type: "image",
        input: ["input/blue_8x8.bmp"],
        output: ["input/blue_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_blue",
        name: "Convert green Image to BLUE",
        Difficulty: "1",
        description: "Test if working on an  green Image ",
        options: ["-c", "color_blue"],
        type: "image",
        input: ["input/green_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_blue",
        name: "Convert white Image to BLUE",
        Difficulty: "1",
        description: "Test if working on an  white Image ",
        options: ["-c", "color_blue"],
        type: "image",
        input: ["input/White_8x8.bmp"],
        output: ["input/blue_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_blue",
        name: "convert black Image to BLUE",
        Difficulty: "1",
        description: "Test if working on an  black Image ",
        options: ["-c", "color_blue"],
        type: "image",
        input: ["input/Black_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_green",
        name: "Convert red image to GREEN",
        Difficulty: "1",
        description: "Test if working on an  red Image ",
        options: ["-c", "color_green"],
        type: "image",
        input: ["input/red_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_green",
        name: "Convert blue image to GREEN",
        Difficulty: "1",
        description: "Test if working on an  blue Image ",
        options: ["-c", "color_green"],
        type: "image",
        input: ["input/blue_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_green",
        name: "Convert green Image to GREEN",
        Difficulty: "1",
        description: "Test if working on an  green Image ",
        options: ["-c", "color_green"],
        type: "image",
        input: ["input/green_8x8.bmp"],
        output: ["input/green_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_green",
        name: "Convert white Image to GREEN",
        Difficulty: "1",
        description: "Test if working on an  white Image ",
        options: ["-c", "color_green"],
        type: "image",
        input: ["input/White_8x8.bmp"],
        output: ["input/green_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_green",
        name: "convert black Image to GREEN",
        Difficulty: "1",
        description: "Test if working on an  black Image ",
        options: ["-c", "color_green"],
        type: "image",
        input: ["input/Black_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray",
        name: "Convert red image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  red Image ",
        options: ["-c", "color_gray"],
        type: "image",
        input: ["input/red_8x8.bmp"],
        output: ["input/M85_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray",
        name: "Convert blue image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  blue Image ",
        options: ["-c", "color_gray"],
        type: "image",
        input: ["input/blue_8x8.bmp"],
        output: ["input/M85_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray",
        name: "Convert green Image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  green Image ",
        options: ["-c", "color_gray"],
        type: "image",
        input: ["input/green_8x8.bmp"],
        output: ["input/M85_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray",
        name: "Convert white Image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  white Image ",
        options: ["-c", "color_gray"],
        type: "image",
        input: ["input/White_8x8.bmp"],
        output: ["input/White_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray",
        name: "convert black Image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  black Image ",
        options: ["-c", "color_gray"],
        type: "image",
        input: ["input/Black_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "invert",
        name: "Invert red image",
        Difficulty: "1",
        description: "Test if working on an  red Image ",
        options: ["-c", "invert"],
        type: "image",
        input: ["input/r_8x8.bmp"],
        output: ["input/cyan_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "invert",
        name: "Invert blue image",
        Difficulty: "1",
        description: "Test if working on an  blue Image ",
        options: ["-c", "invert"],
        type: "image",
        input: ["input/b_8x8.bmp"],
        output: ["input/yellow_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "invert",
        name: "Invert green Image",
        Difficulty: "1",
        description: "Test if working on an  green Image ",
        options: ["-c", "invert"],
        type: "image",
        input: ["input/g_8x8.bmp"],
        output: ["input/magenta_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "invert",
        name: "Invert white Image",
        Difficulty: "1",
        description: "Test if working on an  white Image ",
        options: ["-c", "invert"],
        type: "image",
        input: ["input/W_8x8.bmp"],
        output: ["input/N_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "invert",
        name: "Invert black Image",
        Difficulty: "1",
        description: "Test if working on an  black Image ",
        options: ["-c", "invert"],
        type: "image",
        input: ["input/N_8x8.bmp"],
        output: ["input/W_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray_luminance",
        name: "Convert red image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  red Image ",
        options: ["-c", "color_gray_luminance"],
        type: "image",
        input: ["input/red_8x8.bmp"],
        output: ["input/gray53_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray_luminance",
        name: "Convert blue image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  blue Image ",
        options: ["-c", "color_gray_luminance"],
        type: "image",
        input: ["input/blue_8x8.bmp"],
        output: ["input/gray17_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray_luminance",
        name: "Convert green Image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  green Image ",
        options: ["-c", "color_gray_luminance"],
        type: "image",
        input: ["input/green_8x8.bmp"],
        output: ["input/gray183_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray_luminance",
        name: "Convert white Image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  white Image ",
        options: ["-c", "color_gray_luminance"],
        type: "image",
        input: ["input/White_8x8.bmp"],
        output: ["input/White_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "color_gray_luminance",
        name: "convert black Image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  black Image ",
        options: ["-c", "color_gray_luminance"],
        type: "image",
        input: ["input/Black_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "desaturate",
        name: "Convert red image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  red Image ",
        options: ["-c", "desaturate"],
        type: "image",
        input: ["input/red_8x8.bmp"],
        output: ["input/gray127_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "desaturate",
        name: "Convert blue image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  blue Image ",
        options: ["-c", "desaturate"],
        type: "image",
        input: ["input/blue_8x8.bmp"],
        output: ["input/gray127_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "desaturate",
        name: "Convert green Image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  green Image ",
        options: ["-c", "desaturate"],
        type: "image",
        input: ["input/green_8x8.bmp"],
        output: ["input/gray127_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "desaturate",
        name: "Convert white Image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  white Image ",
        options: ["-c", "desaturate"],
        type: "image",
        input: ["input/White_8x8.bmp"],
        output: ["input/White_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
      {
        feature: "desaturate",
        name: "convert black Image to GRAY",
        Difficulty: "1",
        description: "Test if working on an  black Image ",
        options: ["-c", "desaturate"],
        type: "image",
        input: ["input/Black_8x8.bmp"],
        output: ["input/Black_8x8.bmp"],
        coordinates: "",
        milestone: "colors",
      },
    ],
    transform: [
      {
        feature: "rotate-cw",
        name: "rotate square image",
        Difficulty: "1",
        description: "Take a square image rotate it",
        options: ["-c", "rotate-cw"],
        type: "image",
        input: ["input/rgbw_64x64.bmp"],
        output: ["input/rgbw_64x64_CW.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "rotate-cw",
        name: "rotate large image",
        Difficulty: "2",
        description: "Take an image larger than it is tall",
        options: ["-c", "rotate-cw"],
        type: "image",
        input: ["input/rgbw_64x32.bmp"],
        output: ["input/rgbw_64x32_CW.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "rotate-cw",
        name: "rotate high image",
        Difficulty: "2",
        description: "take an image taller than it is wide",
        options: ["-c", "rotate-cw"],
        type: "image",
        input: ["input/rgbw_32x64.bmp"],
        output: ["input/rgbw_32x64_CW.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "rotate-acw",
        name: "rotate square image",
        Difficulty: "1",
        description: "Take a square image rotate it",
        options: ["-c", "rotate-acw"],
        type: "image",
        input: ["input/rgbw_64x64.bmp"],
        output: ["input/rgbw_64x64_CCW.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "rotate-acw",
        name: "rotate large image",
        Difficulty: "2",
        description: "Take an image larger than it is tall",
        options: ["-c", "rotate-acw"],
        type: "image",
        input: ["input/rgbw_64x32.bmp"],
        output: ["input/rgbw_64x32_CCW.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "rotate-acw",
        name: "rotate high image",
        Difficulty: "2",
        description: "take an image taller than it is wide",
        options: ["-c", "rotate-acw"],
        type: "image",
        input: ["input/rgbw_32x64.bmp"],
        output: ["input/rgbw_32x64_CCW.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "mirror_horizontal",
        name: "mirror square image",
        Difficulty: "1",
        description: "Take a square image rotate it",
        options: ["-c", "mirror_horizontal"],
        type: "image",
        input: ["input/rgbw_64x64.bmp"],
        output: ["input/rgbw_64x64_HS.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "mirror_horizontal",
        name: "mirror large image",
        Difficulty: "2",
        description: "Take an image larger than it is tall",
        options: ["-c", "mirror_horizontal"],
        type: "image",
        input: ["input/rgbw_64x32.bmp"],
        output: ["input/rgbw_64x32_HS.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "mirror_horizontal",
        name: "mirror high image",
        Difficulty: "2",
        description: "take an image taller than it is wide",
        options: ["-c", "mirror_horizontal"],
        type: "image",
        input: ["input/rgbw_32x64.bmp"],
        output: ["input/rgbw_32x64_HS.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "mirror_vertical",
        name: "mirror square image",
        Difficulty: "1",
        description: "Take a square image rotate it",
        options: ["-c", "mirror_vertical"],
        type: "image",
        input: ["input/rgbw_64x64.bmp"],
        output: ["input/rgbw_64x64_VS.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "mirror_vertical",
        name: "mirror large image",
        Difficulty: "2",
        description: "Take an image larger than it is tall",
        options: ["-c", "mirror_vertical"],
        type: "image",
        input: ["input/rgbw_64x32.bmp"],
        output: ["input/rgbw_64x32_VS.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "mirror_vertical",
        name: "mirror high image",
        Difficulty: "2",
        description: "take an image taller than it is wide",
        options: ["-c", "mirror_vertical"],
        type: "image",
        input: ["input/rgbw_32x64.bmp"],
        output: ["input/rgbw_32x64_VS.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "mirror_total",
        name: "mirror square image",
        Difficulty: "1",
        description: "Take a square image rotate it",
        options: ["-c", "mirror_total"],
        type: "image",
        input: ["input/rgbw_64x64.bmp"],
        output: ["input/rgbw_64x64_MT.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "mirror_total",
        name: "mirror large image",
        Difficulty: "2",
        description: "Take an image larger than it is tall",
        options: ["-c", "mirror_total"],
        type: "image",
        input: ["input/rgbw_64x32.bmp"],
        output: ["input/rgbw_64x32_MT.bmp"],
        coordinates: "",
        milestone: "transform",
      },
      {
        feature: "mirror_total",
        name: "mirror high image",
        Difficulty: "2",
        description: "take an image taller than it is wide",
        options: ["-c", "mirror_total"],
        type: "image",
        input: ["input/rgbw_32x64.bmp"],
        output: ["input/rgbw_32x64_MT.bmp"],
        coordinates: "",
        milestone: "transform",
      },
    ],
  },
};
